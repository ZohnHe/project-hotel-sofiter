<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hotel.sofiter.dao.TbPassengerMapper" >
  <resultMap id="BaseResultMap" type="com.hotel.sofiter.pojo.PassengerPo" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sun Oct 16 19:18:30 CST 2016.
    -->
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="papersID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="educationDegreeID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="genderID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="passengerLevelID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="nationID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="thingReasonID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="papersNumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="birthDate" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="licenceIssuingAuthorty" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="unitsOrAddress" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="papersValidity" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="profession" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="whereAreFrom" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="whereToGo" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="contactPhoneNumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="remarks" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>

    <!--   分页模糊查询 -->
    <select id="pageFuzzyselect" resultType="com.hotel.sofiter.pojo.PassengerPo">
       SELECT p.*,a.attributeDetailsName AS papersName,b.attributeDetailsName AS educationDegreeName,
     c.attributeDetailsName AS genderName,d.attributeDetailsName AS passengerLevelName,
     e.attributeDetailsName AS nationName,f.attributeDetailsName AS thingReasonName
     FROM passenger p INNER JOIN attributedetails a ON p.papersID=a.id
     INNER JOIN attributedetails b ON p.educationDegreeID=b.id  INNER JOIN attributedetails c ON p.genderID=c.id
     INNER JOIN attributedetails d ON p.passengerLevelID=d.id INNER JOIN attributedetails e ON p.nationID=e.id
     INNER JOIN attributedetails f ON p.thingReasonID=f.id
        <where>
            <if test="search != null and search.length() > 0">
                name like '%${search}%'
            </if>
        </where>
        <if test="orderStr != null and orderStr.length() > 0">
            ${orderStr}
        </if>
  </select>

    <!--   新增 -->
    <insert id="insertAll" useGeneratedKeys="true" keyProperty="id" parameterType="com.hotel.sofiter.pojo.PassengerPo" >
       INSERT INTO passenger (papersID,educationDegreeID,genderID,passengerLevelID,nationID,
     thingReasonID,name,papersNumber,birthDate,licenceIssuingAuthorty,unitsOrAddress,
     papersValidity,profession,whereAreFrom,whereToGo,contactPhoneNumber,remarks)
     values (#{papersID,jdbcType=INTEGER},
		     #{educationDegreeID,jdbcType=INTEGER},
		     #{genderID,jdbcType=INTEGER},
		     #{passengerLevelID,jdbcType=INTEGER},
		     #{nationID,jdbcType=INTEGER},
		     #{thingReasonID,jdbcType=INTEGER},
             #{name,jdbcType=VARCHAR},
             #{papersNumber,jdbcType=VARCHAR},
             #{birthDate,jdbcType=VARCHAR},
             #{licenceIssuingAuthorty,jdbcType=VARCHAR},
             #{unitsOrAddress,jdbcType=VARCHAR},
             #{papersValidity,jdbcType=VARCHAR},
             #{profession,jdbcType=VARCHAR},
             #{whereAreFrom,jdbcType=VARCHAR},
             #{whereToGo,jdbcType=VARCHAR},
             #{contactPhoneNumber,jdbcType=VARCHAR},
             #{remarks,jdbcType=VARCHAR})
  </insert>
    <!--passengerDelete-->
    <!--删除1.8 dao实现层 -->
    <delete id="passengerDelete" parameterType="com.hotel.sofiter.pojo.PassengerPo">
        delete from passenger
        where id in
        <foreach collection="passengerIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
  </delete>

    <update id="passengerModify" parameterType="com.hotel.sofiter.pojo.PassengerPo">
      UPDATE passenger SET papersID=#{papersID,jdbcType=INTEGER},
					      educationDegreeID=#{educationDegreeID,jdbcType=INTEGER},
					      genderID=#{genderID,jdbcType=INTEGER},
					      passengerLevelID=#{passengerLevelID,jdbcType=INTEGER},
					      nationID=#{nationID,jdbcType=INTEGER},
					      thingReasonID=#{thingReasonID,jdbcType=INTEGER},
			              name=#{name,jdbcType=VARCHAR},
			              papersNumber=#{papersNumber,jdbcType=VARCHAR},
			              birthDate=#{birthDate,jdbcType=VARCHAR},
			              licenceIssuingAuthorty=#{licenceIssuingAuthorty,jdbcType=VARCHAR},
			              unitsOrAddress=#{unitsOrAddress,jdbcType=VARCHAR},
			              papersValidity=#{papersValidity,jdbcType=VARCHAR},
			              profession=#{profession,jdbcType=VARCHAR},
			              whereAreFrom=#{whereAreFrom,jdbcType=VARCHAR},
			              whereToGo=#{whereToGo,jdbcType=VARCHAR},
			              contactPhoneNumber=#{contactPhoneNumber,jdbcType=VARCHAR},
			              remarks=#{remarks,jdbcType=VARCHAR}
                   WHERE id = #{id,jdbcType=INTEGER}
   </update>
    <!--     limit #{start},#{pageSize} -->

    <!--   查询所有旅客数据  -->
    <select id="selectAllPassenger" resultType="com.hotel.sofiter.pojo.PassengerPo">
    SELECT p.*,a.attributeDetailsName AS papersName,b.attributeDetailsName AS educationDegreeName,
     c.attributeDetailsName AS genderName,d.attributeDetailsName AS passengerLevelName,
     e.attributeDetailsName AS nationName,f.attributeDetailsName AS thingReasonName
     FROM passenger p INNER JOIN attributedetails a ON p.papersID=a.id
     INNER JOIN attributedetails b ON p.educationDegreeID=b.id  INNER JOIN attributedetails c ON p.genderID=c.id
     INNER JOIN attributedetails d ON p.passengerLevelID=d.id INNER JOIN attributedetails e ON p.nationID=e.id
     INNER JOIN attributedetails f ON p.thingReasonID=f.id
   </select>

</mapper>